{"version":3,"sources":["..\\src\\index.js"],"names":[],"mappings":";;;;;;sBAAmB,eAAe;;;;uBACd,UAAU;;;;iCACa,oBAAoB;;kCAC7B,MAAM;;2BACL,QAAQ;;yBACV,WAAW;;+BAChB,UAAU;;;;AAEtC,mBANQ,OAAO,EAMI,CAAC;;AAEpB,IAAI,OAAO,QAAM,SAAS,QAAK,CAAC;;AAEhC,SAAS,KAAK,GAAa;mCAAT,OAAO;AAAP,SAAO;;;AACxB,QAAO,sCAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAK,OAAO,EAAC,CAAC;CAC/C;;AAED,SAAS,QAAQ,CAAC,IAAI,EAAE;AACvB,QAAO,oBAdA,QAAQ,MAcI,OAAO,gBAAW,IAAI,UAAO,OAAO,CAAC,CACtD,IAAI,cAdC,KAAK,CAcO,CACjB,MAAM,CAAC,UAAA,KAAK;SAAI,KAAK,CAAC,IAAI,KAAK,MAAM;EAAA,CAAC,CACtC,GAAG,CAAC,UAAA,KAAK;SAAI,KAAK,CAAC,IAAI;EAAA,CAAC,CACxB,GAAG,EAAE,CACL,IAAI,CAAC,UAAA,MAAM;SAAI,WAjBV,KAAK,CAiBe,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAAA,CAAC,CAAC;CAC/C;;AAED,SAAS,cAAc,CAAC,SAAS,EAAE,IAAI,EAAE;AACxC,KAAI,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;AACzB,MAAK,IAAI,KAAI,IAAI,SAAS,EAAE;AAC3B,MAAI,IAAI,GAAG,SAAS,CAAC,KAAI,CAAC,CAAC;AAC3B,MAAI,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;AAC5C,OAAI,QAAQ,GAAG,IAAI,CAAC,KAAI,CAAC,CAAC;AAC1B,SAAM,CAAC,KAAI,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE;AAC9B,SAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC;IACxC,CAAC,CAAC;GACH,MAAM;AACN,SAAM,CAAC,KAAI,CAAC,GAAG,IAAI,CAAC;GACpB;EACD;AACD,QAAO,MAAM,CAAC;CACd;;AAED,SAAS,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE;AAC9B,QAAO,IAAI,CAAC,IAAI,CAAC,UAAA,IAAI;SAAI,qBAAQ,GAAG,CAAC,CACpC,oBAxCgB,SAAS,MAyCrB,OAAO,gCAA2B,IAAI,YACzC,6BAAgB,IAAI,CAAC,CACrB,EACD,oBA5CgB,SAAS,MA6CrB,OAAO,qBAAgB,IAAI,YAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAC7B,CACD,CAAC;EAAA,CAAC,CAAC;CACJ;;AAED,IAAI,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,GAAG,GAAG,qBAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;;;KAAE,GAAG;KAAE,GAAG;QAAM,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC;CAAA,CAAC,CAAC;;AAE7F,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AACtB,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC","file":"src/index.js","sourcesContent":["import extend from 'object-assign';\r\nimport Promise from 'bluebird';\r\nimport {install as installSourceMaps} from 'source-map-support';\r\nimport {readFile, writeFile} from './fs';\r\nimport {lexer as lexMarkdown} from 'marked';\r\nimport {parse as parseSpec} from './grammar';\r\nimport toTypeScriptDef from './to-dts';\r\n\r\ninstallSourceMaps();\r\n\r\nvar rootDir = `${__dirname}/..`;\r\n\r\nfunction merge(...objects) {\r\n\treturn extend(Object.create(null), ...objects);\r\n}\r\n\r\nfunction readSpec(name) {\r\n\treturn readFile(`${rootDir}/estree/${name}.md`, 'utf-8')\r\n\t\t.then(lexMarkdown)\r\n\t\t.filter(token => token.type === 'code')\r\n\t\t.map(token => token.text)\r\n\t\t.all()\r\n\t\t.then(chunks => parseSpec(chunks.join('\\n')));\r\n}\r\n\r\nfunction resolveExtends(extension, base) {\r\n\tvar result = merge(base);\r\n\tfor (let name in extension) {\r\n\t\tlet item = extension[name];\r\n\t\tif (item.kind === 'interface' && !item.base) {\r\n\t\t\tlet baseItem = base[name];\r\n\t\t\tresult[name] = merge(baseItem, {\r\n\t\t\t\tprops: merge(baseItem.props, item.props)\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tresult[name] = item;\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nfunction writeSpec(name, spec) {\r\n\treturn spec.then(spec => Promise.all([\r\n\t\twriteFile(\r\n\t\t\t`${rootDir}/formal-data/typescript/${name}.d.ts`,\r\n\t\t\ttoTypeScriptDef(spec)\r\n\t\t),\r\n\t\twriteFile(\r\n\t\t\t`${rootDir}/formal-data/${name}.json`,\r\n\t\t\tJSON.stringify(spec, null, 2)\r\n\t\t)\r\n\t]));\r\n}\r\n\r\nvar es5 = readSpec('spec');\r\nvar es6 = Promise.all([readSpec('es6'), es5]).then(([es6, es5]) => resolveExtends(es6, es5));\r\n\r\nwriteSpec('es5', es5);\r\nwriteSpec('es6', es6);\r\n"]}